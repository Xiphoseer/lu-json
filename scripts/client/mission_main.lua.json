{"type":"Chunk","body":[{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"require"},"arguments":[{"type":"StringLiteral","value":"o_mis","raw":"'o_mis'"}]}},{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"CONSTANTS"}],"init":[{"type":"TableConstructorExpression","fields":[]}]},{"type":"AssignmentStatement","variables":[{"type":"IndexExpression","base":{"type":"Identifier","name":"CONSTANTS"},"index":{"type":"StringLiteral","value":"NO_OBJECT","raw":"\"NO_OBJECT\""}}],"init":[{"type":"StringLiteral","value":"0","raw":"\"0\""}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"GetMissionVars"},"isLocal":false,"parameters":[{"type":"Identifier","name":"self"}],"body":[{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"SetVar"},"base":{"type":"Identifier","name":"self"}},"arguments":[{"type":"StringLiteral","value":"ConductCoolDown","raw":"\"ConductCoolDown\""},{"type":"BooleanLiteral","value":false,"raw":"false"}]}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"SetVar"},"base":{"type":"Identifier","name":"self"}},"arguments":[{"type":"StringLiteral","value":"ConductTimer_Started","raw":"\"ConductTimer_Started\""},{"type":"BooleanLiteral","value":false,"raw":"false"}]}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"SetVar"},"base":{"type":"Identifier","name":"self"}},"arguments":[{"type":"StringLiteral","value":"Emote_onExitBuyActive","raw":"\"Emote_onExitBuyActive\""},{"type":"BooleanLiteral","value":false,"raw":"false"}]}},{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"Emote"}],"init":[{"type":"TableConstructorExpression","fields":[{"type":"TableKeyString","key":{"type":"Identifier","name":"emote"},"value":{"type":"Identifier","name":"emote"}}]}]}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"IsLocalCharacter"},"isLocal":false,"parameters":[{"type":"Identifier","name":"target"}],"body":[{"type":"ReturnStatement","arguments":[{"type":"BinaryExpression","operator":"==","left":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"GetLocalCharID"},"base":{"type":"Identifier","name":"GAMEOBJ"}},"arguments":[]},"right":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"GetID"},"base":{"type":"Identifier","name":"target"}},"arguments":[]}}]}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"emote"},"isLocal":false,"parameters":[{"type":"Identifier","name":"self"},{"type":"Identifier","name":"target"},{"type":"Identifier","name":"skillType"}],"body":[{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"DoObjectAction"},"arguments":[{"type":"Identifier","name":"self"},{"type":"StringLiteral","value":"anim","raw":"\"anim\""},{"type":"Identifier","name":"skillType"}]}}]}],"comments":[{"type":"Comment","value":"function CreateMissionStates(self)\r\n      --self:SetProximityRadius { radius = 20 ,name = \"misArrows\" }\r\n      --self:SetVar(\"ArrowSent\", nil) \r\n      --self:SetVar(\"childNUM\", 1) \r\n     \r\n    if self:GetVar('Miss.OverRideConduct') then\r\n        self:SetProximityRadius { radius = self:GetVar(\"Miss.conductRadius\") , name = \"conductRadius\" }\r\n    end \r\n\r\n    self:UseStateMachine{} \r\n    -- Idle State\r\n    MissionIdle = State.create()\r\n    MissionIdle.onEnter = function(self)\r\n    \r\n    end \r\n    MissionIdle.onArrived = function(self)\r\n\r\n    end  \r\n    -- Emote State\r\n    MissionEmote = State.create()\r\n    MissionEmote.onEnter = function(self)\r\n               \r\n       emote(self, getMyMissionTarget(self), self:GetVar(\"EmoteType\") ) \r\n       \r\n        -- print(debug.traceback())\r\n    end\r\n    MissionEmote.onArrived = function(self)\r\n     \r\n    end\r\n    \r\n    addState(MissionIdle, \"MissionIdle\", \"MissionIdle\", self)\r\n    addState(MissionEmote, \"MissionEmote\", \"MissionEmote\", self)\r\n    beginStateMachine(\"MissionIdle\", self) \r\n    MissionIdle.onEnter(self)    \r\n    \r\nend\r\n--","raw":"--[[\r\nfunction CreateMissionStates(self)\r\n      --self:SetProximityRadius { radius = 20 ,name = \"misArrows\" }\r\n      --self:SetVar(\"ArrowSent\", nil) \r\n      --self:SetVar(\"childNUM\", 1) \r\n     \r\n    if self:GetVar('Miss.OverRideConduct') then\r\n        self:SetProximityRadius { radius = self:GetVar(\"Miss.conductRadius\") , name = \"conductRadius\" }\r\n    end \r\n\r\n    self:UseStateMachine{} \r\n    -- Idle State\r\n    MissionIdle = State.create()\r\n    MissionIdle.onEnter = function(self)\r\n    \r\n    end \r\n    MissionIdle.onArrived = function(self)\r\n\r\n    end  \r\n    -- Emote State\r\n    MissionEmote = State.create()\r\n    MissionEmote.onEnter = function(self)\r\n               \r\n       emote(self, getMyMissionTarget(self), self:GetVar(\"EmoteType\") ) \r\n       \r\n        -- print(debug.traceback())\r\n    end\r\n    MissionEmote.onArrived = function(self)\r\n     \r\n    end\r\n    \r\n    addState(MissionIdle, \"MissionIdle\", \"MissionIdle\", self)\r\n    addState(MissionEmote, \"MissionEmote\", \"MissionEmote\", self)\r\n    beginStateMachine(\"MissionIdle\", self) \r\n    MissionIdle.onEnter(self)    \r\n    \r\nend\r\n--]]"},{"type":"Comment","value":"------------Special code for mission arrow prototype","raw":"--------------Special code for mission arrow prototype"},{"type":"Comment","value":"onChildLoaded = function(self,msg)\r\n    if  msg.childID:GetLOT().objtemplate == 4014  then\r\n        local v = self:GetVar(\"childNUM\")\r\n        local x = \"Spawn_\"..v\r\n\t    msg.childID:SetMovingPlatformParams{ wsPlatformPath = self:GetVar(x), iStartIndex = 1 }\r\n\t    local n = v + 1\r\n\t    self:SetVar(\"childNUM\", n)\r\n\tend\r\nend \r\n\r\n\r\nonMissionDialogueOK = function(self, msg)\r\n    if self:GetVar(\"Mission_Arrow\") == nil then\r\n        --print(\"nil Misson\")\r\n    end\r\n    if msg.bIsComplete == true and self:GetVar(\"Mission_Complete\") ~= nil  then\r\n        local foundObj = self:GetProximityObjects{ name = \"misArrows\" }.objects\r\n\r\n            for i = 1, table.maxn (foundObj) do  \r\n                if foundObj[i]:GetLOT().objtemplate == 4639 then\r\n                    --storeObjectByName(missionObj[i], \"missionArrow\", self)\r\n                    foundObj[i]:NotifyObject{ name = \"removeArrow\" }\r\n                    break\r\n\r\n                end\r\n            end\r\n    end    \r\n     if self:GetVar(\"Mission_Arrow\") ~= nil and self:GetVar(\"ArrowSent\") == nil then\r\n\r\n                --print(\"Arrows Sent\") \r\n                local s = self:GetVar(\"Mission_Arrow\")\r\n                local path = split(s, '-')\r\n\r\n                  for b = 1, table.maxn(path) do\r\n                    self:SetVar(\"Spawn_\"..b,path[b])       \r\n                    local config = { {\"renderDisabled\", true } , {\"Group_Obj\", 99 } }\r\n                    local firstWP = self:GetPosition().pos\r\n                    RESMGR:LoadObject { objectTemplate =  4014  , x=  firstWP.x  , y=  firstWP.y , z=  firstWP.z  , owner = self, configData = config  } \r\n                    \r\n                    self:SetVar(\"ArrowSent\", 99) \r\n                  end              \r\n                \r\n               \r\n  \r\n    end\r\n \r\n\r\nend\r\n--","raw":"--[[\r\nonChildLoaded = function(self,msg)\r\n    if  msg.childID:GetLOT().objtemplate == 4014  then\r\n        local v = self:GetVar(\"childNUM\")\r\n        local x = \"Spawn_\"..v\r\n\t    msg.childID:SetMovingPlatformParams{ wsPlatformPath = self:GetVar(x), iStartIndex = 1 }\r\n\t    local n = v + 1\r\n\t    self:SetVar(\"childNUM\", n)\r\n\tend\r\nend \r\n\r\n\r\nonMissionDialogueOK = function(self, msg)\r\n    if self:GetVar(\"Mission_Arrow\") == nil then\r\n        --print(\"nil Misson\")\r\n    end\r\n    if msg.bIsComplete == true and self:GetVar(\"Mission_Complete\") ~= nil  then\r\n        local foundObj = self:GetProximityObjects{ name = \"misArrows\" }.objects\r\n\r\n            for i = 1, table.maxn (foundObj) do  \r\n                if foundObj[i]:GetLOT().objtemplate == 4639 then\r\n                    --storeObjectByName(missionObj[i], \"missionArrow\", self)\r\n                    foundObj[i]:NotifyObject{ name = \"removeArrow\" }\r\n                    break\r\n\r\n                end\r\n            end\r\n    end    \r\n     if self:GetVar(\"Mission_Arrow\") ~= nil and self:GetVar(\"ArrowSent\") == nil then\r\n\r\n                --print(\"Arrows Sent\") \r\n                local s = self:GetVar(\"Mission_Arrow\")\r\n                local path = split(s, '-')\r\n\r\n                  for b = 1, table.maxn(path) do\r\n                    self:SetVar(\"Spawn_\"..b,path[b])       \r\n                    local config = { {\"renderDisabled\", true } , {\"Group_Obj\", 99 } }\r\n                    local firstWP = self:GetPosition().pos\r\n                    RESMGR:LoadObject { objectTemplate =  4014  , x=  firstWP.x  , y=  firstWP.y , z=  firstWP.z  , owner = self, configData = config  } \r\n                    \r\n                    self:SetVar(\"ArrowSent\", 99) \r\n                  end              \r\n                \r\n               \r\n  \r\n    end\r\n \r\n\r\nend\r\n--]]"}]}