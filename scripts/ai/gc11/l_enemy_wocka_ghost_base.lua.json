{"type":"Chunk","body":[{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"require"},"arguments":[{"type":"StringLiteral","value":"o_mis","raw":"'o_mis'"}]}},{"type":"LocalStatement","variables":[{"type":"Identifier","name":"strCurrentDirection"}],"init":[{"type":"StringLiteral","value":"N","raw":"\"N\""}]},{"type":"LocalStatement","variables":[{"type":"Identifier","name":"timeCooldown"}],"init":[{"type":"NumericLiteral","value":0,"raw":"0"}]},{"type":"LocalStatement","variables":[{"type":"Identifier","name":"bTipGhostStun"}],"init":[{"type":"BooleanLiteral","value":false,"raw":"false"}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"onStartup"},"isLocal":false,"parameters":[{"type":"Identifier","name":"self"}],"body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"Set"}],"init":[{"type":"TableConstructorExpression","fields":[]}]},{"type":"CallStatement","expression":{"type":"TableCallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"AddSkill"},"base":{"type":"Identifier","name":"self"}},"arguments":{"type":"TableConstructorExpression","fields":[{"type":"TableValue","value":{"type":"NumericLiteral","value":75,"raw":"75"}}]}}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"FollowWaypoints"},"base":{"type":"Identifier","name":"self"}},"arguments":[]}},{"type":"CallStatement","expression":{"type":"TableCallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"SetProximityRadius"},"base":{"type":"Identifier","name":"self"}},"arguments":{"type":"TableConstructorExpression","fields":[{"type":"TableKeyString","key":{"type":"Identifier","name":"radius"},"value":{"type":"NumericLiteral","value":5,"raw":"5"}},{"type":"TableKeyString","key":{"type":"Identifier","name":"name"},"value":{"type":"StringLiteral","value":"GhostStun","raw":"\"GhostStun\""}}]}}}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"isOppositeDirection"},"isLocal":false,"parameters":[{"type":"Identifier","name":"strDir1"},{"type":"Identifier","name":"strDir2"}],"body":[{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"LogicalExpression","operator":"and","left":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir1"},"right":{"type":"StringLiteral","value":"N","raw":"\"N\""}},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir2"},"right":{"type":"StringLiteral","value":"S","raw":"\"S\""}}},"body":[{"type":"ReturnStatement","arguments":[{"type":"BooleanLiteral","value":true,"raw":"true"}]}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"LogicalExpression","operator":"and","left":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir1"},"right":{"type":"StringLiteral","value":"S","raw":"\"S\""}},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir2"},"right":{"type":"StringLiteral","value":"N","raw":"\"N\""}}},"body":[{"type":"ReturnStatement","arguments":[{"type":"BooleanLiteral","value":true,"raw":"true"}]}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"LogicalExpression","operator":"and","left":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir1"},"right":{"type":"StringLiteral","value":"E","raw":"\"E\""}},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir2"},"right":{"type":"StringLiteral","value":"W","raw":"\"W\""}}},"body":[{"type":"ReturnStatement","arguments":[{"type":"BooleanLiteral","value":true,"raw":"true"}]}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"LogicalExpression","operator":"and","left":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir1"},"right":{"type":"StringLiteral","value":"W","raw":"\"W\""}},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir2"},"right":{"type":"StringLiteral","value":"E","raw":"\"E\""}}},"body":[{"type":"ReturnStatement","arguments":[{"type":"BooleanLiteral","value":true,"raw":"true"}]}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"LogicalExpression","operator":"and","left":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir2"},"right":{"type":"StringLiteral","value":"N","raw":"\"N\""}},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir1"},"right":{"type":"StringLiteral","value":"S","raw":"\"S\""}}},"body":[{"type":"ReturnStatement","arguments":[{"type":"BooleanLiteral","value":true,"raw":"true"}]}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"LogicalExpression","operator":"and","left":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir2"},"right":{"type":"StringLiteral","value":"S","raw":"\"S\""}},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir1"},"right":{"type":"StringLiteral","value":"N","raw":"\"N\""}}},"body":[{"type":"ReturnStatement","arguments":[{"type":"BooleanLiteral","value":true,"raw":"true"}]}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"LogicalExpression","operator":"and","left":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir2"},"right":{"type":"StringLiteral","value":"E","raw":"\"E\""}},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir1"},"right":{"type":"StringLiteral","value":"W","raw":"\"W\""}}},"body":[{"type":"ReturnStatement","arguments":[{"type":"BooleanLiteral","value":true,"raw":"true"}]}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"LogicalExpression","operator":"and","left":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir2"},"right":{"type":"StringLiteral","value":"W","raw":"\"W\""}},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"strDir1"},"right":{"type":"StringLiteral","value":"E","raw":"\"E\""}}},"body":[{"type":"ReturnStatement","arguments":[{"type":"BooleanLiteral","value":true,"raw":"true"}]}]}]},{"type":"ReturnStatement","arguments":[{"type":"BooleanLiteral","value":false,"raw":"false"}]}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"getCurrentCardinalDirection"},"isLocal":false,"parameters":[{"type":"Identifier","name":"pSelf"}],"body":[{"type":"LocalStatement","variables":[{"type":"Identifier","name":"vFacing"}],"init":[{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"fwd"},"base":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"GetPlayerForward"},"base":{"type":"Identifier","name":"pSelf"}},"arguments":[]}}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":">","left":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"abs"},"base":{"type":"Identifier","name":"math"}},"arguments":[{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"x"},"base":{"type":"Identifier","name":"vFacing"}}]},"right":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"abs"},"base":{"type":"Identifier","name":"math"}},"arguments":[{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"z"},"base":{"type":"Identifier","name":"vFacing"}}]}},"body":[{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":">","left":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"x"},"base":{"type":"Identifier","name":"vFacing"}},"right":{"type":"NumericLiteral","value":0,"raw":"0"}},"body":[{"type":"ReturnStatement","arguments":[{"type":"StringLiteral","value":"E","raw":"\"E\""}]}]},{"type":"ElseClause","body":[{"type":"ReturnStatement","arguments":[{"type":"StringLiteral","value":"W","raw":"\"W\""}]}]}]}]},{"type":"ElseClause","body":[{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":">","left":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"z"},"base":{"type":"Identifier","name":"vFacing"}},"right":{"type":"NumericLiteral","value":0,"raw":"0"}},"body":[{"type":"ReturnStatement","arguments":[{"type":"StringLiteral","value":"S","raw":"\"S\""}]}]},{"type":"ElseClause","body":[{"type":"ReturnStatement","arguments":[{"type":"StringLiteral","value":"N","raw":"\"N\""}]}]}]}]}]},{"type":"ReturnStatement","arguments":[{"type":"NilLiteral","value":null,"raw":"nil"}]}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"onArrived"},"isLocal":false,"parameters":[{"type":"Identifier","name":"self"},{"type":"Identifier","name":"msg"}],"body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"strCurrentDirection"}],"init":[{"type":"CallExpression","base":{"type":"Identifier","name":"getCurrentCardinalDirection"},"arguments":[{"type":"Identifier","name":"self"}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"actions"},"base":{"type":"Identifier","name":"msg"}},"body":[{"type":"LocalStatement","variables":[{"type":"Identifier","name":"s"}],"init":[]},{"type":"LocalStatement","variables":[{"type":"Identifier","name":"t"}],"init":[]},{"type":"LocalStatement","variables":[{"type":"Identifier","name":"iNumActions"}],"init":[{"type":"UnaryExpression","operator":"#","argument":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"actions"},"base":{"type":"Identifier","name":"msg"}}}]},{"type":"ForGenericStatement","variables":[{"type":"Identifier","name":"index"},{"type":"Identifier","name":"value"}],"iterators":[{"type":"CallExpression","base":{"type":"Identifier","name":"ipairs"},"arguments":[{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"actions"},"base":{"type":"Identifier","name":"msg"}}]}],"body":[{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"name"},"right":{"type":"StringLiteral","value":"teleport","raw":"\"teleport\""}},"body":[{"type":"LocalStatement","variables":[{"type":"Identifier","name":"s"}],"init":[{"type":"Identifier","name":"value"}]},{"type":"LocalStatement","variables":[{"type":"Identifier","name":"t"}],"init":[{"type":"CallExpression","base":{"type":"Identifier","name":"split"},"arguments":[{"type":"Identifier","name":"s"},{"type":"StringLiteral","value":",","raw":"','"}]}]},{"type":"LocalStatement","variables":[{"type":"Identifier","name":"xSplit"}],"init":[{"type":"TableConstructorExpression","fields":[{"type":"TableKeyString","key":{"type":"Identifier","name":"x"},"value":{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":1,"raw":"1"}}},{"type":"TableKeyString","key":{"type":"Identifier","name":"y"},"value":{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":2,"raw":"2"}}},{"type":"TableKeyString","key":{"type":"Identifier","name":"z"},"value":{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":3,"raw":"3"}}}]}]},{"type":"CallStatement","expression":{"type":"TableCallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"Teleport"},"base":{"type":"Identifier","name":"self"}},"arguments":{"type":"TableConstructorExpression","fields":[{"type":"TableKeyString","key":{"type":"Identifier","name":"pos"},"value":{"type":"Identifier","name":"xSplit"}}]}}}]},{"type":"ElseifClause","condition":{"type":"BinaryExpression","operator":"==","left":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"name"},"base":{"type":"Identifier","name":"value"}},"right":{"type":"StringLiteral","value":"EOP","raw":"\"EOP\""}},"body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"s"}],"init":[{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"value"},"base":{"type":"Identifier","name":"value"}}]},{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"t"}],"init":[{"type":"CallExpression","base":{"type":"Identifier","name":"split"},"arguments":[{"type":"Identifier","name":"s"},{"type":"StringLiteral","value":",","raw":"','"}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":"~=","left":{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":3,"raw":"3"}},"right":{"type":"NilLiteral","value":null,"raw":"nil"}},"body":[{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"CallExpression","base":{"type":"Identifier","name":"isOppositeDirection"},"arguments":[{"type":"Identifier","name":"strCurrentDirection"},{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":3,"raw":"3"}}]},"body":[{"type":"BreakStatement"}]},{"type":"ElseClause","body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"strCurrentDirection"}],"init":[{"type":"CallExpression","base":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"upper"},"base":{"type":"Identifier","name":"string"}},"arguments":[{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":3,"raw":"3"}}]}]}]}]}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":"==","left":{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":2,"raw":"2"}},"right":{"type":"NilLiteral","value":null,"raw":"nil"}},"body":[{"type":"AssignmentStatement","variables":[{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":2,"raw":"2"}}],"init":[{"type":"NumericLiteral","value":0,"raw":"0"}]}]}]},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"SetVar"},"base":{"type":"Identifier","name":"self"}},"arguments":[{"type":"StringLiteral","value":"attached_path","raw":"\"attached_path\""},{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":1,"raw":"1"}}]}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"SetVar"},"base":{"type":"Identifier","name":"self"}},"arguments":[{"type":"StringLiteral","value":"attached_path_start","raw":"\"attached_path_start\""},{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":2,"raw":"2"}}]}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"FollowWaypoints"},"base":{"type":"Identifier","name":"self"}},"arguments":[]}},{"type":"BreakStatement"}]},{"type":"ElseifClause","condition":{"type":"BinaryExpression","operator":"~=","left":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"find"},"base":{"type":"Identifier","name":"string"}},"arguments":[{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"name"},"base":{"type":"Identifier","name":"value"}},{"type":"StringLiteral","value":"JXN","raw":"\"JXN\""}]},"right":{"type":"NilLiteral","value":null,"raw":"nil"}},"body":[{"type":"LocalStatement","variables":[{"type":"Identifier","name":"iChance"}],"init":[]},{"type":"LocalStatement","variables":[{"type":"Identifier","name":"iRoll"}],"init":[]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"iNumActions"},"right":{"type":"NumericLiteral","value":1,"raw":"1"}},"body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"iChance"}],"init":[{"type":"NumericLiteral","value":50,"raw":"50"}]}]},{"type":"ElseifClause","condition":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"iNumActions"},"right":{"type":"NumericLiteral","value":2,"raw":"2"}},"body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"iChance"}],"init":[{"type":"NumericLiteral","value":33,"raw":"33"}]}]},{"type":"ElseifClause","condition":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"iNumActions"},"right":{"type":"NumericLiteral","value":3,"raw":"3"}},"body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"iChance"}],"init":[{"type":"NumericLiteral","value":25,"raw":"25"}]}]},{"type":"ElseClause","body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"iChance"}],"init":[{"type":"NumericLiteral","value":25,"raw":"25"}]}]}]},{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"iRoll"}],"init":[{"type":"CallExpression","base":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"random"},"base":{"type":"Identifier","name":"math"}},"arguments":[{"type":"NumericLiteral","value":100,"raw":"100"}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":"<","left":{"type":"Identifier","name":"iRoll"},"right":{"type":"Identifier","name":"iChance"}},"body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"s"}],"init":[{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"value"},"base":{"type":"Identifier","name":"value"}}]},{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"t"}],"init":[{"type":"CallExpression","base":{"type":"Identifier","name":"split"},"arguments":[{"type":"Identifier","name":"s"},{"type":"StringLiteral","value":",","raw":"','"}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":"~=","left":{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":3,"raw":"3"}},"right":{"type":"NilLiteral","value":null,"raw":"nil"}},"body":[{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"CallExpression","base":{"type":"Identifier","name":"isOppositeDirection"},"arguments":[{"type":"Identifier","name":"strCurrentDirection"},{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":3,"raw":"3"}}]},"body":[{"type":"BreakStatement"}]},{"type":"ElseClause","body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"strCurrentDirection"}],"init":[{"type":"CallExpression","base":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"upper"},"base":{"type":"Identifier","name":"string"}},"arguments":[{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":3,"raw":"3"}}]}]}]}]}]}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":"==","left":{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":2,"raw":"2"}},"right":{"type":"NilLiteral","value":null,"raw":"nil"}},"body":[{"type":"AssignmentStatement","variables":[{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":2,"raw":"2"}}],"init":[{"type":"NumericLiteral","value":0,"raw":"0"}]}]}]},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"SetVar"},"base":{"type":"Identifier","name":"self"}},"arguments":[{"type":"StringLiteral","value":"attached_path","raw":"\"attached_path\""},{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":1,"raw":"1"}}]}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"SetVar"},"base":{"type":"Identifier","name":"self"}},"arguments":[{"type":"StringLiteral","value":"attached_path_start","raw":"\"attached_path_start\""},{"type":"IndexExpression","base":{"type":"Identifier","name":"t"},"index":{"type":"NumericLiteral","value":2,"raw":"2"}}]}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"FollowWaypoints"},"base":{"type":"Identifier","name":"self"}},"arguments":[]}}]}]}]}]}]}]}]},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"ContinueWaypoints"},"base":{"type":"Identifier","name":"self"}},"arguments":[]}}]},{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"onTimerDone"}],"init":[{"type":"FunctionDeclaration","identifier":null,"isLocal":false,"parameters":[{"type":"Identifier","name":"self"},{"type":"Identifier","name":"msg"}],"body":[{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":"==","left":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"name"},"base":{"type":"Identifier","name":"msg"}},"right":{"type":"StringLiteral","value":"StunCooldown","raw":"\"StunCooldown\""},"inParens":true},"body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"timeCooldown"}],"init":[{"type":"NumericLiteral","value":0,"raw":"0"}]}]}]}]}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"onProximityUpdate"},"isLocal":false,"parameters":[{"type":"Identifier","name":"self"},{"type":"Identifier","name":"msg"}],"body":[{"type":"LocalStatement","variables":[{"type":"Identifier","name":"foundFaction"}],"init":[{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"faction"},"base":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"GetFaction"},"base":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"objId"},"base":{"type":"Identifier","name":"msg"}}},"arguments":[]}}]},{"type":"LocalStatement","variables":[{"type":"Identifier","name":"myFaction"}],"init":[{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"faction"},"base":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"GetFaction"},"base":{"type":"Identifier","name":"self"}},"arguments":[]}}]},{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"myFaction"},"right":{"type":"Identifier","name":"foundFaction"}},"body":[{"type":"ReturnStatement","arguments":[]}]}]},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"print"},"arguments":[{"type":"StringLiteral","value":"something near, me:","raw":"\"something near, me:\""},{"type":"Identifier","name":"myFaction"},{"type":"StringLiteral","value":"it:","raw":"\"it:\""},{"type":"Identifier","name":"foundFaction"}]}},{"type":"LocalStatement","variables":[{"type":"Identifier","name":"bSuccess"}],"init":[{"type":"BooleanLiteral","value":false,"raw":"false"}]},{"type":"CallStatement","expression":{"type":"TableCallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"CastSkill"},"base":{"type":"Identifier","name":"self"}},"arguments":{"type":"TableConstructorExpression","fields":[{"type":"TableKeyString","key":{"type":"Identifier","name":"skillID"},"value":{"type":"NumericLiteral","value":75,"raw":"75"}},{"type":"TableKeyString","key":{"type":"Identifier","name":"succeeded"},"value":{"type":"Identifier","name":"bSuccess"}},{"type":"TableKeyString","key":{"type":"Identifier","name":"timeToRecast"},"value":{"type":"Identifier","name":"timeCooldown"}}]}}}]}],"comments":[{"type":"Comment","value":" require('State')","raw":"-- require('State')"},{"type":"Comment","value":"require('o_StateCreate')","raw":"--require('o_StateCreate')"},{"type":"Comment","value":"require('o_Main')","raw":"--require('o_Main')"},{"type":"Comment","value":"Base functionality for wocka ghosts (pathfinding etc.)\r\nv 1.0\r\n\r\n\r\n","raw":"--[[\r\nBase functionality for wocka ghosts (pathfinding etc.)\r\nv 1.0\r\n\r\n\r\n]]"},{"type":"Comment","value":"","raw":"--"},{"type":"Comment","value":"default north","raw":"--default north"},{"type":"Comment","value":" what does this do?","raw":"-- what does this do?"},{"type":"Comment","value":"Set['WanderSpeed']       = 50          -- Move speed ","raw":"--Set['WanderSpeed']       = 50          -- Move speed "},{"type":"Comment","value":" \r\nstrDir1 and 2 must be capital letters, N, S, E, W, representing the four cardinal directions. \r\nreturns true if strDir1 is directly opposed to strDir2, false otherwise\r\n","raw":"--[[ \r\nstrDir1 and 2 must be capital letters, N, S, E, W, representing the four cardinal directions. \r\nreturns true if strDir1 is directly opposed to strDir2, false otherwise\r\n]]"},{"type":"Comment","value":"","raw":"--"},{"type":"Comment","value":" \r\nreturns a string N, S, E, W based on my current linear velocity\r\nassumes orientation of X+ being E, X- being W, AND\r\n>>>>>> ***** Z- being N, Z+ being S ******** <<<<<\r\n","raw":"--[[ \r\nreturns a string N, S, E, W based on my current linear velocity\r\nassumes orientation of X+ being E, X- being W, AND\r\n>>>>>> ***** Z- being N, Z+ being S ******** <<<<<\r\n]]"},{"type":"Comment","value":"","raw":"--"},{"type":"Comment","value":" x is bigger than z","raw":"-- x is bigger than z"},{"type":"Comment","value":" z is bigger than x","raw":"-- z is bigger than x"},{"type":"Comment","value":" should never return this","raw":"-- should never return this"},{"type":"Comment","value":" \r\ncalled on every waypoint, waypoints are 0 based in Lua script\r\n\tAssumptions: \r\n \t1) EOP actions should never happen on the same waypoint as JXN_X actions.\r\n  \t2) EOP action values will always be in the form \"\"\r\n\t\r\n\tActions:\r\n\tName\tValues\r\n\tEOP\t<next_path_name>,<waypoint_index>,<direction_of_jump>\r\n\t\tEnd Of Path\r\n\t\t\r\n\tJXN\t<next_path_name>,<waypoint_index>,<direction_of_jump>\r\n\t\tJunction.  Should have one JXN action for every possible jump\r\n","raw":"--[[ \r\ncalled on every waypoint, waypoints are 0 based in Lua script\r\n\tAssumptions: \r\n \t1) EOP actions should never happen on the same waypoint as JXN_X actions.\r\n  \t2) EOP action values will always be in the form \"\"\r\n\t\r\n\tActions:\r\n\tName\tValues\r\n\tEOP\t<next_path_name>,<waypoint_index>,<direction_of_jump>\r\n\t\tEnd Of Path\r\n\t\t\r\n\tJXN\t<next_path_name>,<waypoint_index>,<direction_of_jump>\r\n\t\tJunction.  Should have one JXN action for every possible jump\r\n]]"},{"type":"Comment","value":"","raw":"--"},{"type":"Comment","value":"print(\"onArrived:\", msg.wayPoint, \"current direction:\", strCurrentDirection) --DEBUG","raw":"--print(\"onArrived:\", msg.wayPoint, \"current direction:\", strCurrentDirection) --DEBUG"},{"type":"Comment","value":"print(#msg.actions)  -- how many actions","raw":"--print(#msg.actions)  -- how many actions"},{"type":"Comment","value":"print(index, value.name, value.value) --DEBUG","raw":"--print(index, value.name, value.value) --DEBUG"},{"type":"Comment","value":"--------------------- teleport","raw":"----------------------- teleport"},{"type":"Comment","value":"self:SetVar(\"WPEvent_NUM\", self:GetVar(\"WPEvent_NUM\") + 1 ) ","raw":"--self:SetVar(\"WPEvent_NUM\", self:GetVar(\"WPEvent_NUM\") + 1 ) "},{"type":"Comment","value":"setState(\"WayPointEvent\", self) ","raw":"--setState(\"WayPointEvent\", self) "},{"type":"Comment","value":"If we reach end of path, transition to next appropriate path and node","raw":"--If we reach end of path, transition to next appropriate path and node"},{"type":"Comment","value":" t[1] == new path","raw":"-- t[1] == new path"},{"type":"Comment","value":" t[2] == new waypoint","raw":"-- t[2] == new waypoint"},{"type":"Comment","value":" t[3] == new direction","raw":"-- t[3] == new direction"},{"type":"Comment","value":" don't change direction if you're just bouncing without a wall in front of you","raw":"-- don't change direction if you're just bouncing without a wall in front of you"},{"type":"Comment","value":"print (\"At EOP, changing path to:\", t[1], t[2], strCurrentDirection) --DEBUG","raw":"--print (\"At EOP, changing path to:\", t[1], t[2], strCurrentDirection) --DEBUG"},{"type":"Comment","value":"If we reach a junction, determine if we should go in a new direction (never in opposite of current direction)","raw":"--If we reach a junction, determine if we should go in a new direction (never in opposite of current direction)"},{"type":"Comment","value":" randomly pick a new direction, % based on number of JXNs (2.0: never reverse direction, will need to store current direction)","raw":"-- randomly pick a new direction, % based on number of JXNs (2.0: never reverse direction, will need to store current direction)"},{"type":"Comment","value":"print(\"At JXN, %chance to change:\",iChance,\" rolled a\",iRoll) --DEBUG","raw":"--print(\"At JXN, %chance to change:\",iChance,\" rolled a\",iRoll) --DEBUG"},{"type":"Comment","value":" t[1] == new path","raw":"-- t[1] == new path"},{"type":"Comment","value":" t[2] == new waypoint","raw":"-- t[2] == new waypoint"},{"type":"Comment","value":" t[3] == new direction","raw":"-- t[3] == new direction"},{"type":"Comment","value":"print(\"not changing due to opposite direction\") --DEBUG","raw":"--print(\"not changing due to opposite direction\") --DEBUG"},{"type":"Comment","value":" don't change direction if you're just bouncing without a wall in front of you","raw":"-- don't change direction if you're just bouncing without a wall in front of you"},{"type":"Comment","value":"print (\"Changing path to:\", t[1], t[2], strCurrentDirection) --DEBUG","raw":"--print (\"Changing path to:\", t[1], t[2], strCurrentDirection) --DEBUG"},{"type":"Comment","value":" if there are no messages, carry on","raw":"-- if there are no messages, carry on"},{"type":"Comment","value":"------------------------------------------------------------","raw":"--------------------------------------------------------------"},{"type":"Comment","value":" Timers","raw":"-- Timers"},{"type":"Comment","value":"------------------------------------------------------------","raw":"--------------------------------------------------------------"},{"type":"Comment","value":" DEBUG","raw":"-- DEBUG"},{"type":"Comment","value":" need to make sure to addskill onstartup","raw":"-- need to make sure to addskill onstartup"},{"type":"Comment","value":"CastSkill\r\n\t    number skillID\r\n\t    OBJECT optionalTargetID\r\n\t    bool      succeeded      -- this is set when you call the function.  Check it to see if it succeeded\r\n\t    number timeToRecast -- this is set when you call it.  It tells you how long to wait until you can cast it again \r\n\t","raw":"--[[CastSkill\r\n\t    number skillID\r\n\t    OBJECT optionalTargetID\r\n\t    bool      succeeded      -- this is set when you call the function.  Check it to see if it succeeded\r\n\t    number timeToRecast -- this is set when you call it.  It tells you how long to wait until you can cast it again \r\n\t]]"},{"type":"Comment","value":"","raw":"--"},{"type":"Comment","value":"if timeCooldown == 0 then","raw":"--if timeCooldown == 0 then"},{"type":"Comment","value":"local timeCooldown = 2","raw":"--local timeCooldown = 2"},{"type":"Comment","value":"msg.objId:SetStunned{true}","raw":"--msg.objId:SetStunned{true}"},{"type":"Comment","value":" display tooltip to all players in race","raw":"-- display tooltip to all players in race"},{"type":"Comment","value":"for pnum = 1, #PLAYERS do\r\n\t\r\n\t    local player = GAMEOBJ:GetObjectByID(PLAYERS[pnum])\r\n\t    local playerData = self:GetVar(PLAYERS[pnum])\r\n\t    \r\n\t    if ((winner:GetID() == PLAYERS[pnum])) then\r\n\r\n\t        -- show tooltip to winner\r\n\t        player:DisplayTooltip{ bShow = true, strText = \"You Win!\\n Waiting for other players.\" }\r\n\t        player:PlayFXEffect{effectType = \"fireworks\"}\r\n\r\n\t    elseif (player and playerData) then\r\n\t    \r\n\t        -- show tooltip to others\r\n\t        player:DisplayTooltip{ bShow = true, strText = \"Winner: \" .. winnerName .. \"\\nRace ends in \" .. CONSTANTS[\"RACE_FINISH_TIME\"] .. \" seconds.\", iTime = 5000 }\r\n\r\n\t    end\r\n\r\n\tend","raw":"--[[for pnum = 1, #PLAYERS do\r\n\t\r\n\t    local player = GAMEOBJ:GetObjectByID(PLAYERS[pnum])\r\n\t    local playerData = self:GetVar(PLAYERS[pnum])\r\n\t    \r\n\t    if ((winner:GetID() == PLAYERS[pnum])) then\r\n\r\n\t        -- show tooltip to winner\r\n\t        player:DisplayTooltip{ bShow = true, strText = \"You Win!\\n Waiting for other players.\" }\r\n\t        player:PlayFXEffect{effectType = \"fireworks\"}\r\n\r\n\t    elseif (player and playerData) then\r\n\t    \r\n\t        -- show tooltip to others\r\n\t        player:DisplayTooltip{ bShow = true, strText = \"Winner: \" .. winnerName .. \"\\nRace ends in \" .. CONSTANTS[\"RACE_FINISH_TIME\"] .. \" seconds.\", iTime = 5000 }\r\n\r\n\t    end\r\n\r\n\tend]]"},{"type":"Comment","value":"","raw":"--"},{"type":"Comment","value":"optionalTargetID = self, ","raw":"--optionalTargetID = self, "},{"type":"Comment","value":" sonic boom stun skill","raw":"-- sonic boom stun skill"},{"type":"Comment","value":"~ \t\tif not bTipGhostStun then","raw":"--~ \t\tif not bTipGhostStun then"},{"type":"Comment","value":"~ \t\t\tprint (\"tip\")","raw":"--~ \t\t\tprint (\"tip\")"},{"type":"Comment","value":"~ \t\t\t--local player = GAMEOBJ:GetObjectByID(msg.objId)","raw":"--~ \t\t\t--local player = GAMEOBJ:GetObjectByID(msg.objId)"},{"type":"Comment","value":"~ \t\t\t--print(\"player id:\",player:GetID())","raw":"--~ \t\t\t--print(\"player id:\",player:GetID())"},{"type":"Comment","value":"~ \t\t\tmsg.objId:DisplayToolTip{bShow=true, strText = \"Watch out!  Ghosts stun you!\"}","raw":"--~ \t\t\tmsg.objId:DisplayToolTip{bShow=true, strText = \"Watch out!  Ghosts stun you!\"}"},{"type":"Comment","value":"~ \t\t\tbTipGhostStun = true","raw":"--~ \t\t\tbTipGhostStun = true"},{"type":"Comment","value":"~ \t\tend","raw":"--~ \t\tend"},{"type":"Comment","value":"self:CastSkill{skillID = 54 ,optionalTargetID = msg.objId, succeeded = bSuccess, timeToRecast = timeCooldown} -- sonic boom stun skill","raw":"--self:CastSkill{skillID = 54 ,optionalTargetID = msg.objId, succeeded = bSuccess, timeToRecast = timeCooldown} -- sonic boom stun skill"},{"type":"Comment","value":"print(\"timeCooldown\", timeCooldown, \"bsuccess\", bSuccess) -- DEBUG","raw":"--print(\"timeCooldown\", timeCooldown, \"bsuccess\", bSuccess) -- DEBUG"},{"type":"Comment","value":"GAMEOBJ:GetTimer():AddTimerWithCancel( timeCooldown, \"StunCooldown\", self )","raw":"--GAMEOBJ:GetTimer():AddTimerWithCancel( timeCooldown, \"StunCooldown\", self )"},{"type":"Comment","value":"end","raw":"--end"},{"type":"Comment","value":"\r\n\r\n     if msg.objType == \"Enemies\" or msg.objType == \"NPC\" or msg.objType == \"Rebuildables\" then\r\n\r\n----------------------------------------------------------------------------------\r\n                \r\n         \r\n---------------------------------------------------------------------------------\r\n                -- Follow Code -- \r\n                if foundFaction == 1 and self:GetVar(\"Set.FollowActive\")  and  (self:GetVar(\"Imfollowing\") == nil or self:GetVar(\"Imfollowing\") == false)  and self:GetVar(\"Imfollowing\") ~= \"done\" then\r\n                    if  msg.status == \"ENTER\" and msg.name == \"conductRadius\" then\r\n                        storeHomePoint(self)\r\n                        storeTarget(self, msg.objId)\r\n                        setState(\"Follow\", self)\r\n                    end\r\n                end \r\n\r\n            --print(msg.objId:GetName().name) \r\n            -- Fear Flee onProx\r\n            if ( self:GetVar(\"Set.FearPlayer\") or self:GetVar(\"Set.FearNPC\") ) and not self:GetVar(\"inpursuit\") and self:GetVar(\"tetherON\") ~= true and not self:GetVar(\"Fleeing\") then\r\n                -- Chance to Flee -- \r\n                local  ran =  math.random(1,100)\r\n                if ran <= self:GetVar('Set.FearChance') then\r\n                    -- Get Player Faction here -- \r\n                    if self:GetVar('Set.FearPlayer') and msg.objId:GetFaction().faction == 1 then\r\n                        self:SetVar(\"FearFound\", true)\r\n                    end\r\n                    -- Get NPC Faction List here -- \r\n                    if self:GetVar('Set.FearNPC') then\r\n                        for u = 1,4 do  \r\n                            if msg.objId:GetFaction().faction == self:GetVar(\"Set.FearNPC_\"..u) then\r\n                                self:SetVar(\"FearFound\", true)\r\n                            end\r\n                        end \r\n                    end \r\n                   -- Store target if found \r\n                    if  self:GetVar(\"FearFound\") then \r\n                            storeTarget(self, msg.objId)\r\n                            \r\n                    end\r\n\r\n                    if msg.status == \"ENTER\" and msg.name == \"conductRadius\" and not self:GetVar(\"FearFlee_CoolDown\") and self:GetVar(\"FearFound\") and self:GetVar(\"Set.FearFOV\") == nil then\r\n                            GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                            self:SetTetherPoint { tetherPt = self:GetPosition().pos,radius = self:GetVar(\"Set.tetherRadius\") }\r\n                            setState(\"FearFlee\",self)\r\n                    end\r\n                    if msg.status == \"ENTER\" and msg.name == \"conductFOVRadius\" and not self:GetVar(\"FearFlee_CoolDown\") and self:GetVar(\"FearFound\") and  self:GetVar(\"Set.FearFOV\") > 0 then\r\n                            local infront = self:IsObjectInFOV { target = msg.objId, radius = self:GetVar(\"Set.FearFOV\") , minRange = 0, maxRange = 100 }.result\r\n                            if infront then\r\n                                GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                                self:SetTetherPoint { tetherPt = self:GetPosition().pos,radius = self:GetVar(\"Set.tetherRadius\") }\r\n                                setState(\"FearFlee\",self)\r\n                            end\r\n                    end\r\n                end\r\n            end \r\n\r\n\r\n\r\n           if msg.status == \"ENTER\" and (self:GetVar(\"Set.Conduct_1_Active\") or self:GetVar(\"Set.FollowActive\")) and not self:GetVar(\"inpursuit\") then\r\n\r\n                local foundFaction = msg.objId:GetFaction().faction\r\n\r\n\r\n                if foundFaction == self:GetVar(\"Set.Con_1_AFaction\") and self:GetVar(\"Set.Con_1_Type\") == \"sneakto\" and self:GetVar(\"Set.Conduct_1_Active\") then\r\n                        self:SetVar(\"FoundFOVtarget\", true) \r\n                \r\n                elseif foundFaction == self:GetVar(\"Set.Con_2_AFaction\") and self:GetVar(\"Set.Con_2_Type\") == \"sneakto\" and self:GetVar(\"Set.Conduct_2_Active\") then\r\n                        self:SetVar(\"FoundFOVtarget\", true) \r\n                else\r\n                        self:SetVar(\"FoundFOVtarget\", false) \r\n                end \r\n\r\n                \r\n                if msg.name == \"conductRadius\" and msg.objId:GetVar(\"inpursuit\") ~= true and not self:GetVar(\"inpursuit\") and not self:GetVar(\"FoundFOVtarget\") then\r\n\r\n                    if (foundFaction == self:GetVar(\"Set.Con_1_AFaction\") and self:GetVar(\"Set.Con_1_Type\") ~= \"sneakto\") or (foundFaction == self:GetVar(\"Set.Con_2_AFaction\") and self:GetVar(\"Set.Con_2_Type\") ~= \"sneakto\")then\r\n                \r\n                        local ran = math.random(1,100)\r\n                     \r\n                        if self:GetVar(\"Set.Conduct_MainWeight\") >= ran then\r\n                            self:SetVar(\"ConductCoolingDown\",true)\r\n                            self:SetVar(\"inpursuit\", true) \r\n                            GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                            self:SetTetherPoint { tetherPt = self:GetPosition().pos,radius = self:GetVar(\"Set.tetherRadius\") }\r\n                            storeHomePoint(self)\r\n                            storeTarget(self, msg.objId)\r\n                            conductTrigger(self,msg.objId:GetFaction().faction) \r\n                         end \r\n                     \r\n                    end\r\n                end\r\n                    \r\n            end \r\n             if msg.name == \"conductFOVRadius\" and not msg.objId:GetVar(\"inpursuit\") and not self:GetVar(\"inpursuit\") and not self:GetVar(\"ConductCoolingDown\") then\r\n            \r\n                if msg.objId:GetFaction().faction ==  self:GetVar(\"Set.Con_1_AFaction\") or msg.objId:GetFaction().faction ==  self:GetVar(\"Set.Con_2_AFaction\") and msg.status == \"ENTER\" then\r\n                \r\n                    local ran = math.random(1,100)\r\n                   \r\n                    \r\n                        if self:GetVar(\"Set.Conduct_MainWeight\") >= ran then\r\n\r\n                            local infront = self:IsObjectInFOV { target = msg.objId, radius = self:GetVar(\"Set.conductFOV\") , minRange = 0, maxRange = 100 }.result\r\n                            if infront then\r\n                                self:SetVar(\"ConductCoolingDown\",true)\r\n                                self:SetVar(\"inpursuit\", true) \r\n                                GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                                self:SetTetherPoint { tetherPt = self:GetPosition().pos,radius = self:GetVar(\"Set.tetherRadius\") }\r\n                                storeHomePoint(self)\r\n                                storeTarget(self, msg.objId)\r\n                                conductTrigger(self,msg.objId:GetFaction().faction) \r\n                            end\r\n                            \r\n                        end\r\n                \r\n                  end\r\n                \r\n              end            \r\n           \r\n            \r\n            \r\n\r\n------------------------------------------------------------------------------------------------------------------\r\n------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n             --------- Helper On Enter\r\n             if msg ~= nil and checkFaction == 0 then\r\n                 if msg.status == \"ENTER\" and msg.objId:GetFaction().faction == self:GetVar(\"HelpFaction\") and not msg.objId:IsDead().bDead and msg.name == \"HelpRadius\" and msg.objId:GetVar(\"inpursuit\") == true and self:GetVar(\"inpursuit\") == false then\r\n                        target = getMyTarget(msg.objId)\r\n                      --  print(\"My Target is ===\"..target)\r\n                         if target ~= nil then\r\n                            storeTarget(self, target)\r\n                         else\r\n                            print(\"Error i dont have a target\") \r\n                         end\r\n                        \r\n                        setState(\"aggro\", self)\r\n                       \r\n                 end\r\n             end\r\n             --- Aggro On Enter\r\n\r\n                -- Get Hate List\r\n               if self:GetVar(\"Set.AggroNPC\") then\r\n                  for i = 1, 4 do \r\n                    if msg.objId:GetFaction().faction == self:GetVar(\"Set.NPCHated_\"..i) then\r\n                        self:SetVar(\"FoundHated\", true) \r\n                    end                   \r\n                  end\r\n               end\r\n\r\n\r\n               if msg.status == \"ENTER\" and (self:IsEnemy{ targetID = msg.objId }.enemy or self:GetVar(\"FoundHated\"))   and not msg.objId:IsDead().bDead and msg.name == \"aggroRadius\" and self:GetVar(\"FleeStatus\")  ~= 1 then\r\n                    GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                    if self:GetVar(\"Set.Aggression\") == \"Aggressive\" or self:GetVar(\"Set.Aggression\") == \"PassiveAggres\" then\r\n                            storeTarget(self, msg.objId)\r\n                            \r\n                            if self:GetVar(\"aggrotarget\") == 0 and self:GetVar(\"AggroDelayDone\") then\r\n\r\n                                  if self:GetVar(\"Set.AggroEmote\") and self:GetVar(\"AggroDelayDone\") then\r\n                                  \r\n                                  \r\n                                     self:FaceTarget{ target = getMyTarget(self), degreesOff = 5, keepFacingTarget = true }\r\n                                     Emote.emote(self,target , self:GetVar(\"Set.AggroE_Type\")) \r\n\r\n\r\n                                    GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                                    self:SetVar(\"inpursuit\", true) \r\n                                    self:SetVar(\"aggrotarget\",1) \r\n                                    storeHomePoint(self)\r\n                                    self:SetTetherPoint { tetherPt = myPos,\r\n                                                          radius = self:GetVar(\"tetherRadius\") \r\n                                                        }\r\n                                     GAMEOBJ:GetTimer():AddTimerWithCancel( self:GetVar(\"Set.AggroE_Delay\") , \"AggroEmote\", self )\r\n                                     self:SetVar(\"AggroDelayDone\", false) \r\n                                     setState(\"Idle\",self)\r\n                                     \r\n                                else\r\n\r\n                                    GAMEOBJ:GetTimer():CancelTimer( \"Conduct\", self )\r\n                                    self:SetVar(\"inpursuit\", true) \r\n                                    storeHomePoint(self)\r\n                                    local myPos = self:GetPosition().pos\r\n                                    self:SetTetherPoint { tetherPt = myPos,\r\n                                                          radius = self:GetVar(\"Se.tetherRadius\") \r\n                                                        }\r\n                                    self:SetVar(\"aggrotarget\",1) \r\n                                end\r\n                            end\r\n                            if aggroTarget ~= 2 and self:GetVar(\"AggroDelayDone\") then\r\n                                setState(\"aggro\", self)\r\n                            end\r\n                    end\r\n                end\r\n\r\n\r\n       end\r\n       ","raw":"--[[\r\n\r\n\r\n     if msg.objType == \"Enemies\" or msg.objType == \"NPC\" or msg.objType == \"Rebuildables\" then\r\n\r\n----------------------------------------------------------------------------------\r\n                \r\n         \r\n---------------------------------------------------------------------------------\r\n                -- Follow Code -- \r\n                if foundFaction == 1 and self:GetVar(\"Set.FollowActive\")  and  (self:GetVar(\"Imfollowing\") == nil or self:GetVar(\"Imfollowing\") == false)  and self:GetVar(\"Imfollowing\") ~= \"done\" then\r\n                    if  msg.status == \"ENTER\" and msg.name == \"conductRadius\" then\r\n                        storeHomePoint(self)\r\n                        storeTarget(self, msg.objId)\r\n                        setState(\"Follow\", self)\r\n                    end\r\n                end \r\n\r\n            --print(msg.objId:GetName().name) \r\n            -- Fear Flee onProx\r\n            if ( self:GetVar(\"Set.FearPlayer\") or self:GetVar(\"Set.FearNPC\") ) and not self:GetVar(\"inpursuit\") and self:GetVar(\"tetherON\") ~= true and not self:GetVar(\"Fleeing\") then\r\n                -- Chance to Flee -- \r\n                local  ran =  math.random(1,100)\r\n                if ran <= self:GetVar('Set.FearChance') then\r\n                    -- Get Player Faction here -- \r\n                    if self:GetVar('Set.FearPlayer') and msg.objId:GetFaction().faction == 1 then\r\n                        self:SetVar(\"FearFound\", true)\r\n                    end\r\n                    -- Get NPC Faction List here -- \r\n                    if self:GetVar('Set.FearNPC') then\r\n                        for u = 1,4 do  \r\n                            if msg.objId:GetFaction().faction == self:GetVar(\"Set.FearNPC_\"..u) then\r\n                                self:SetVar(\"FearFound\", true)\r\n                            end\r\n                        end \r\n                    end \r\n                   -- Store target if found \r\n                    if  self:GetVar(\"FearFound\") then \r\n                            storeTarget(self, msg.objId)\r\n                            \r\n                    end\r\n\r\n                    if msg.status == \"ENTER\" and msg.name == \"conductRadius\" and not self:GetVar(\"FearFlee_CoolDown\") and self:GetVar(\"FearFound\") and self:GetVar(\"Set.FearFOV\") == nil then\r\n                            GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                            self:SetTetherPoint { tetherPt = self:GetPosition().pos,radius = self:GetVar(\"Set.tetherRadius\") }\r\n                            setState(\"FearFlee\",self)\r\n                    end\r\n                    if msg.status == \"ENTER\" and msg.name == \"conductFOVRadius\" and not self:GetVar(\"FearFlee_CoolDown\") and self:GetVar(\"FearFound\") and  self:GetVar(\"Set.FearFOV\") > 0 then\r\n                            local infront = self:IsObjectInFOV { target = msg.objId, radius = self:GetVar(\"Set.FearFOV\") , minRange = 0, maxRange = 100 }.result\r\n                            if infront then\r\n                                GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                                self:SetTetherPoint { tetherPt = self:GetPosition().pos,radius = self:GetVar(\"Set.tetherRadius\") }\r\n                                setState(\"FearFlee\",self)\r\n                            end\r\n                    end\r\n                end\r\n            end \r\n\r\n\r\n\r\n           if msg.status == \"ENTER\" and (self:GetVar(\"Set.Conduct_1_Active\") or self:GetVar(\"Set.FollowActive\")) and not self:GetVar(\"inpursuit\") then\r\n\r\n                local foundFaction = msg.objId:GetFaction().faction\r\n\r\n\r\n                if foundFaction == self:GetVar(\"Set.Con_1_AFaction\") and self:GetVar(\"Set.Con_1_Type\") == \"sneakto\" and self:GetVar(\"Set.Conduct_1_Active\") then\r\n                        self:SetVar(\"FoundFOVtarget\", true) \r\n                \r\n                elseif foundFaction == self:GetVar(\"Set.Con_2_AFaction\") and self:GetVar(\"Set.Con_2_Type\") == \"sneakto\" and self:GetVar(\"Set.Conduct_2_Active\") then\r\n                        self:SetVar(\"FoundFOVtarget\", true) \r\n                else\r\n                        self:SetVar(\"FoundFOVtarget\", false) \r\n                end \r\n\r\n                \r\n                if msg.name == \"conductRadius\" and msg.objId:GetVar(\"inpursuit\") ~= true and not self:GetVar(\"inpursuit\") and not self:GetVar(\"FoundFOVtarget\") then\r\n\r\n                    if (foundFaction == self:GetVar(\"Set.Con_1_AFaction\") and self:GetVar(\"Set.Con_1_Type\") ~= \"sneakto\") or (foundFaction == self:GetVar(\"Set.Con_2_AFaction\") and self:GetVar(\"Set.Con_2_Type\") ~= \"sneakto\")then\r\n                \r\n                        local ran = math.random(1,100)\r\n                     \r\n                        if self:GetVar(\"Set.Conduct_MainWeight\") >= ran then\r\n                            self:SetVar(\"ConductCoolingDown\",true)\r\n                            self:SetVar(\"inpursuit\", true) \r\n                            GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                            self:SetTetherPoint { tetherPt = self:GetPosition().pos,radius = self:GetVar(\"Set.tetherRadius\") }\r\n                            storeHomePoint(self)\r\n                            storeTarget(self, msg.objId)\r\n                            conductTrigger(self,msg.objId:GetFaction().faction) \r\n                         end \r\n                     \r\n                    end\r\n                end\r\n                    \r\n            end \r\n             if msg.name == \"conductFOVRadius\" and not msg.objId:GetVar(\"inpursuit\") and not self:GetVar(\"inpursuit\") and not self:GetVar(\"ConductCoolingDown\") then\r\n            \r\n                if msg.objId:GetFaction().faction ==  self:GetVar(\"Set.Con_1_AFaction\") or msg.objId:GetFaction().faction ==  self:GetVar(\"Set.Con_2_AFaction\") and msg.status == \"ENTER\" then\r\n                \r\n                    local ran = math.random(1,100)\r\n                   \r\n                    \r\n                        if self:GetVar(\"Set.Conduct_MainWeight\") >= ran then\r\n\r\n                            local infront = self:IsObjectInFOV { target = msg.objId, radius = self:GetVar(\"Set.conductFOV\") , minRange = 0, maxRange = 100 }.result\r\n                            if infront then\r\n                                self:SetVar(\"ConductCoolingDown\",true)\r\n                                self:SetVar(\"inpursuit\", true) \r\n                                GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                                self:SetTetherPoint { tetherPt = self:GetPosition().pos,radius = self:GetVar(\"Set.tetherRadius\") }\r\n                                storeHomePoint(self)\r\n                                storeTarget(self, msg.objId)\r\n                                conductTrigger(self,msg.objId:GetFaction().faction) \r\n                            end\r\n                            \r\n                        end\r\n                \r\n                  end\r\n                \r\n              end            \r\n           \r\n            \r\n            \r\n\r\n------------------------------------------------------------------------------------------------------------------\r\n------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n             --------- Helper On Enter\r\n             if msg ~= nil and checkFaction == 0 then\r\n                 if msg.status == \"ENTER\" and msg.objId:GetFaction().faction == self:GetVar(\"HelpFaction\") and not msg.objId:IsDead().bDead and msg.name == \"HelpRadius\" and msg.objId:GetVar(\"inpursuit\") == true and self:GetVar(\"inpursuit\") == false then\r\n                        target = getMyTarget(msg.objId)\r\n                      --  print(\"My Target is ===\"..target)\r\n                         if target ~= nil then\r\n                            storeTarget(self, target)\r\n                         else\r\n                            print(\"Error i dont have a target\") \r\n                         end\r\n                        \r\n                        setState(\"aggro\", self)\r\n                       \r\n                 end\r\n             end\r\n             --- Aggro On Enter\r\n\r\n                -- Get Hate List\r\n               if self:GetVar(\"Set.AggroNPC\") then\r\n                  for i = 1, 4 do \r\n                    if msg.objId:GetFaction().faction == self:GetVar(\"Set.NPCHated_\"..i) then\r\n                        self:SetVar(\"FoundHated\", true) \r\n                    end                   \r\n                  end\r\n               end\r\n\r\n\r\n               if msg.status == \"ENTER\" and (self:IsEnemy{ targetID = msg.objId }.enemy or self:GetVar(\"FoundHated\"))   and not msg.objId:IsDead().bDead and msg.name == \"aggroRadius\" and self:GetVar(\"FleeStatus\")  ~= 1 then\r\n                    GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                    if self:GetVar(\"Set.Aggression\") == \"Aggressive\" or self:GetVar(\"Set.Aggression\") == \"PassiveAggres\" then\r\n                            storeTarget(self, msg.objId)\r\n                            \r\n                            if self:GetVar(\"aggrotarget\") == 0 and self:GetVar(\"AggroDelayDone\") then\r\n\r\n                                  if self:GetVar(\"Set.AggroEmote\") and self:GetVar(\"AggroDelayDone\") then\r\n                                  \r\n                                  \r\n                                     self:FaceTarget{ target = getMyTarget(self), degreesOff = 5, keepFacingTarget = true }\r\n                                     Emote.emote(self,target , self:GetVar(\"Set.AggroE_Type\")) \r\n\r\n\r\n                                    GAMEOBJ:GetTimer():CancelAllTimers( self )\r\n                                    self:SetVar(\"inpursuit\", true) \r\n                                    self:SetVar(\"aggrotarget\",1) \r\n                                    storeHomePoint(self)\r\n                                    self:SetTetherPoint { tetherPt = myPos,\r\n                                                          radius = self:GetVar(\"tetherRadius\") \r\n                                                        }\r\n                                     GAMEOBJ:GetTimer():AddTimerWithCancel( self:GetVar(\"Set.AggroE_Delay\") , \"AggroEmote\", self )\r\n                                     self:SetVar(\"AggroDelayDone\", false) \r\n                                     setState(\"Idle\",self)\r\n                                     \r\n                                else\r\n\r\n                                    GAMEOBJ:GetTimer():CancelTimer( \"Conduct\", self )\r\n                                    self:SetVar(\"inpursuit\", true) \r\n                                    storeHomePoint(self)\r\n                                    local myPos = self:GetPosition().pos\r\n                                    self:SetTetherPoint { tetherPt = myPos,\r\n                                                          radius = self:GetVar(\"Se.tetherRadius\") \r\n                                                        }\r\n                                    self:SetVar(\"aggrotarget\",1) \r\n                                end\r\n                            end\r\n                            if aggroTarget ~= 2 and self:GetVar(\"AggroDelayDone\") then\r\n                                setState(\"aggro\", self)\r\n                            end\r\n                    end\r\n                end\r\n\r\n\r\n       end\r\n       ]]"},{"type":"Comment","value":"","raw":"--"}]}