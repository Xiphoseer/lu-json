{"type":"Chunk","body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"State"}],"init":[{"type":"TableConstructorExpression","fields":[]}]},{"type":"AssignmentStatement","variables":[{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"__index"},"base":{"type":"Identifier","name":"State"}}],"init":[{"type":"Identifier","name":"State"}]},{"type":"LocalStatement","variables":[{"type":"Identifier","name":"g_usedEvents"}],"init":[{"type":"StringLiteral","value":"","raw":"\"\""}]},{"type":"FunctionDeclaration","identifier":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"create"},"base":{"type":"Identifier","name":"State"}},"isLocal":false,"parameters":[],"body":[{"type":"LocalStatement","variables":[{"type":"Identifier","name":"newState"}],"init":[{"type":"TableConstructorExpression","fields":[]}]},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"setmetatable"},"arguments":[{"type":"Identifier","name":"newState"},{"type":"Identifier","name":"State"}]}},{"type":"ReturnStatement","arguments":[{"type":"Identifier","name":"newState"}]}]},{"type":"FunctionDeclaration","identifier":{"type":"MemberExpression","indexer":".","identifier":{"type":"Identifier","name":"registerEvents"},"base":{"type":"Identifier","name":"State"}},"isLocal":false,"parameters":[{"type":"Identifier","name":"self"}],"body":[{"type":"LocalStatement","variables":[{"type":"Identifier","name":"i"}],"init":[{"type":"CallExpression","base":{"type":"Identifier","name":"next"},"arguments":[{"type":"Identifier","name":"self"},{"type":"NilLiteral","value":null,"raw":"nil"}]}]},{"type":"WhileStatement","condition":{"type":"Identifier","name":"i"},"body":[{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"LogicalExpression","operator":"and","left":{"type":"BinaryExpression","operator":"~=","left":{"type":"Identifier","name":"i"},"right":{"type":"StringLiteral","value":"onEnter","raw":"\"onEnter\""}},"right":{"type":"BinaryExpression","operator":"~=","left":{"type":"Identifier","name":"i"},"right":{"type":"StringLiteral","value":"onExit","raw":"\"onExit\""}}},"body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"g_usedEvents"}],"init":[{"type":"BinaryExpression","operator":"..","left":{"type":"Identifier","name":"g_usedEvents"},"right":{"type":"BinaryExpression","operator":"..","left":{"type":"Identifier","name":"i"},"right":{"type":"StringLiteral","value":":","raw":"\":\""}}}]}]}]},{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"i"}],"init":[{"type":"CallExpression","base":{"type":"Identifier","name":"next"},"arguments":[{"type":"Identifier","name":"self"},{"type":"Identifier","name":"i"}]}]}]}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"addState"},"isLocal":false,"parameters":[{"type":"Identifier","name":"newState"},{"type":"Identifier","name":"newStateString"},{"type":"Identifier","name":"name"},{"type":"Identifier","name":"gameObj"}],"body":[{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"Identifier","name":"newState"},"body":[{"type":"CallStatement","expression":{"type":"TableCallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"AddState"},"base":{"type":"Identifier","name":"gameObj"}},"arguments":{"type":"TableConstructorExpression","fields":[{"type":"TableKeyString","key":{"type":"Identifier","name":"functionName"},"value":{"type":"Identifier","name":"newStateString"}},{"type":"TableKeyString","key":{"type":"Identifier","name":"stateName"},"value":{"type":"Identifier","name":"name"}}]}}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"registerEvents"},"base":{"type":"Identifier","name":"newState"}},"arguments":[]}}]},{"type":"ElseClause","body":[{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"print"},"arguments":[{"type":"StringLiteral","value":"--------------SCRIPT ERROR----------------","raw":"\"--------------SCRIPT ERROR----------------\""}]}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"print"},"arguments":[{"type":"BinaryExpression","operator":"..","left":{"type":"StringLiteral","value":"Attempting to register invalid state:","raw":"\"Attempting to register invalid state:\""},"right":{"type":"BinaryExpression","operator":"..","left":{"type":"Identifier","name":"name"},"right":{"type":"BinaryExpression","operator":"..","left":{"type":"StringLiteral","value":"func:","raw":"\"func:\""},"right":{"type":"Identifier","name":"newStateString"}}}}]}}]}]}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"addSubState"},"isLocal":false,"parameters":[{"type":"Identifier","name":"newState"},{"type":"Identifier","name":"newStateString"},{"type":"Identifier","name":"name"},{"type":"Identifier","name":"gameObj"}],"body":[{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"Identifier","name":"newState"},"body":[{"type":"CallStatement","expression":{"type":"TableCallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"AddSubState"},"base":{"type":"Identifier","name":"gameObj"}},"arguments":{"type":"TableConstructorExpression","fields":[{"type":"TableKeyString","key":{"type":"Identifier","name":"functionName"},"value":{"type":"Identifier","name":"newStateString"}},{"type":"TableKeyString","key":{"type":"Identifier","name":"subStateName"},"value":{"type":"Identifier","name":"name"}}]}}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"registerEvents"},"base":{"type":"Identifier","name":"newState"}},"arguments":[]}}]},{"type":"ElseClause","body":[{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"print"},"arguments":[{"type":"StringLiteral","value":"--------------SCRIPT ERROR----------------","raw":"\"--------------SCRIPT ERROR----------------\""}]}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"print"},"arguments":[{"type":"BinaryExpression","operator":"..","left":{"type":"StringLiteral","value":"Attempting to register invalid sub-state","raw":"\"Attempting to register invalid sub-state\""},"right":{"type":"BinaryExpression","operator":"..","left":{"type":"Identifier","name":"name"},"right":{"type":"BinaryExpression","operator":"..","left":{"type":"StringLiteral","value":"func","raw":"\"func\""},"right":{"type":"Identifier","name":"newStateString"}}}}]}}]}]}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"beginStateMachine"},"isLocal":false,"parameters":[{"type":"Identifier","name":"initialState"},{"type":"Identifier","name":"gameObj"}],"body":[{"type":"IfStatement","clauses":[{"type":"IfClause","condition":{"type":"BinaryExpression","operator":"==","left":{"type":"Identifier","name":"g_usedEvents"},"right":{"type":"StringLiteral","value":"","raw":"\"\""}},"body":[{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"print"},"arguments":[{"type":"StringLiteral","value":"--------------SCRIPT ERROR----------------","raw":"\"--------------SCRIPT ERROR----------------\""}]}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"print"},"arguments":[{"type":"StringLiteral","value":"Calling beginStateMachine more than once or","raw":"\"Calling beginStateMachine more than once or\""}]}},{"type":"CallStatement","expression":{"type":"CallExpression","base":{"type":"Identifier","name":"print"},"arguments":[{"type":"StringLiteral","value":"creating a state machine that accepts no messages","raw":"\"creating a state machine that accepts no messages\""}]}}]},{"type":"ElseClause","body":[{"type":"CallStatement","expression":{"type":"TableCallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"AddMessage"},"base":{"type":"Identifier","name":"gameObj"}},"arguments":{"type":"TableConstructorExpression","fields":[{"type":"TableKeyString","key":{"type":"Identifier","name":"messageName"},"value":{"type":"Identifier","name":"g_usedEvents"}}]}}},{"type":"CallStatement","expression":{"type":"TableCallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"SetState"},"base":{"type":"Identifier","name":"gameObj"}},"arguments":{"type":"TableConstructorExpression","fields":[{"type":"TableKeyString","key":{"type":"Identifier","name":"stateName"},"value":{"type":"Identifier","name":"initialState"}}]}}},{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"g_usedEvents"}],"init":[{"type":"StringLiteral","value":"","raw":"\"\""}]}]}]}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"setState"},"isLocal":false,"parameters":[{"type":"Identifier","name":"state"},{"type":"Identifier","name":"gameObj"}],"body":[{"type":"CallStatement","expression":{"type":"TableCallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"SetState"},"base":{"type":"Identifier","name":"gameObj"}},"arguments":{"type":"TableConstructorExpression","fields":[{"type":"TableKeyString","key":{"type":"Identifier","name":"stateName"},"value":{"type":"Identifier","name":"state"}}]}}}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"setSubState"},"isLocal":false,"parameters":[{"type":"Identifier","name":"state"},{"type":"Identifier","name":"gameObj"}],"body":[{"type":"CallStatement","expression":{"type":"TableCallExpression","base":{"type":"MemberExpression","indexer":":","identifier":{"type":"Identifier","name":"SetSubState"},"base":{"type":"Identifier","name":"gameObj"}},"arguments":{"type":"TableConstructorExpression","fields":[{"type":"TableKeyString","key":{"type":"Identifier","name":"subStateName"},"value":{"type":"Identifier","name":"state"}}]}}}]},{"type":"FunctionDeclaration","identifier":{"type":"Identifier","name":"resetStateMachineFromError"},"isLocal":false,"parameters":[],"body":[{"type":"AssignmentStatement","variables":[{"type":"Identifier","name":"g_usedEvents"}],"init":[{"type":"StringLiteral","value":"","raw":"\"\""}]}]}],"comments":[{"type":"Comment","value":" To see how to use the state machine, look at","raw":"-- To see how to use the state machine, look at"},{"type":"Comment","value":" http://abhoth.netdevil.com/display/LUW/Lua+State+Machine","raw":"-- http://abhoth.netdevil.com/display/LUW/Lua+State+Machine"},{"type":"Comment","value":" Used to store all the events that are use by this state machine","raw":"-- Used to store all the events that are use by this state machine"},{"type":"Comment","value":" State constructor","raw":"-- State constructor"},{"type":"Comment","value":" Register all the messages that this state will accept","raw":"-- Register all the messages that this state will accept"},{"type":"Comment","value":" Add a state to an object's state machine.  Takes in the name of the state,","raw":"-- Add a state to an object's state machine.  Takes in the name of the state,"},{"type":"Comment","value":" and a reference to the game object","raw":"-- and a reference to the game object"},{"type":"Comment","value":" Param:","raw":"-- Param:"},{"type":"Comment","value":" \t\tnewState - the table that is the state","raw":"-- \t\tnewState - the table that is the state"},{"type":"Comment","value":"\t\tnewStateString - the newState in string form. ","raw":"--\t\tnewStateString - the newState in string form. "},{"type":"Comment","value":"\t\tname - the name of the state in the state machine","raw":"--\t\tname - the name of the state in the state machine"},{"type":"Comment","value":"\t\tgameObj - the game object that we are affecting","raw":"--\t\tgameObj - the game object that we are affecting"},{"type":"Comment","value":"      EXAMPLE: AttackAggresive = State.create()","raw":"--      EXAMPLE: AttackAggresive = State.create()"},{"type":"Comment","value":"\t\taddState(AttackAggresive, \"AttackAggressive\", \"Attack\", gameObj)","raw":"--\t\taddState(AttackAggresive, \"AttackAggressive\", \"Attack\", gameObj)"},{"type":"Comment","value":" Add a sub-state to an object's state machine.  Takes in the name of the state,","raw":"-- Add a sub-state to an object's state machine.  Takes in the name of the state,"},{"type":"Comment","value":" and a reference to the game object","raw":"-- and a reference to the game object"},{"type":"Comment","value":" Start the state machine at the given inital state","raw":"-- Start the state machine at the given inital state"},{"type":"Comment","value":" Utility functions so we don't have to remember the variable name needed for SetState","raw":"-- Utility functions so we don't have to remember the variable name needed for SetState"},{"type":"Comment","value":"------- HOW TO USE STATES ----------------","raw":"--------- HOW TO USE STATES ----------------"},{"type":"Comment","value":" Declare a state by calling State.create() and assigning it","raw":"-- Declare a state by calling State.create() and assigning it"},{"type":"Comment","value":" to your state.","raw":"-- to your state."},{"type":"Comment","value":" Ex: attackState = State.create()","raw":"-- Ex: attackState = State.create()"},{"type":"Comment","value":" Call HandleEvent.  Every state should define HandleEvent.","raw":"-- Call HandleEvent.  Every state should define HandleEvent."},{"type":"Comment","value":" This is how you do it.","raw":"-- This is how you do it."},{"type":"Comment","value":" attackState = State.create()","raw":"-- attackState = State.create()"},{"type":"Comment","value":" attackState.HandleEvent = function(msg)","raw":"-- attackState.HandleEvent = function(msg)"},{"type":"Comment","value":" if(msg.name == \"Hit\")","raw":"-- if(msg.name == \"Hit\")"},{"type":"Comment","value":"   DoSomethingAboutIt()","raw":"--   DoSomethingAboutIt()"},{"type":"Comment","value":"   return 1","raw":"--   return 1"},{"type":"Comment","value":" else if(msg.name == \"Dance\")","raw":"-- else if(msg.name == \"Dance\")"},{"type":"Comment","value":" \t\t...","raw":"-- \t\t..."},{"type":"Comment","value":" else","raw":"-- else"},{"type":"Comment","value":"   return 0","raw":"--   return 0"},{"type":"Comment","value":" Only handle the messages you really care about.","raw":"-- Only handle the messages you really care about."},{"type":"Comment","value":" Return 1 if you handled a message, return 0 if you did not","raw":"-- Return 1 if you handled a message, return 0 if you did not"},{"type":"Comment","value":" NOTE: you can also define HandleEvent like this:","raw":"-- NOTE: you can also define HandleEvent like this:"},{"type":"Comment","value":" someGenericFunction(msg)","raw":"-- someGenericFunction(msg)"},{"type":"Comment","value":" ...","raw":"-- ..."},{"type":"Comment","value":" end","raw":"-- end"},{"type":"Comment","value":" attackState.HandleEvent = someGenericFunction","raw":"-- attackState.HandleEvent = someGenericFunction"},{"type":"Comment","value":" You can optionally add the functions Enter and Exit","raw":"-- You can optionally add the functions Enter and Exit"},{"type":"Comment","value":" These will be called when a state enters or exits","raw":"-- These will be called when a state enters or exits"},{"type":"Comment","value":"- SETTING UP THE STATE MACHINE ---","raw":"--- SETTING UP THE STATE MACHINE ---"},{"type":"Comment","value":" First, create all the states that you will need (see above on how to do that)","raw":"-- First, create all the states that you will need (see above on how to do that)"},{"type":"Comment","value":" State Machines are created in onStartup","raw":"-- State Machines are created in onStartup"},{"type":"Comment","value":" Call self:UseStateMachine{}","raw":"-- Call self:UseStateMachine{}"},{"type":"Comment","value":" Then assign the sates as such","raw":"-- Then assign the sates as such"},{"type":"Comment","value":" \tself:AddState { stateName = \"stateIdle\" }","raw":"-- \tself:AddState { stateName = \"stateIdle\" }"},{"type":"Comment","value":"\tself:AddState { stateName = \"stateAttack\" }","raw":"--\tself:AddState { stateName = \"stateAttack\" }"},{"type":"Comment","value":"\t\tself:AddSubState { stateName = \"stateWin\" }  -- stateWin is now a substae of stateAttack","raw":"--\t\tself:AddSubState { stateName = \"stateWin\" }  -- stateWin is now a substae of stateAttack"},{"type":"Comment","value":"  When you are done adding states, call SetState and pass in the name of the first state you","raw":"--  When you are done adding states, call SetState and pass in the name of the first state you"},{"type":"Comment","value":"  want to start in.","raw":"--  want to start in."},{"type":"Comment","value":" \tself:SetState { stateName = \"stateIdle\" }","raw":"-- \tself:SetState { stateName = \"stateIdle\" }"}]}